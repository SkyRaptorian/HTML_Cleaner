"""
A tool to clean up autogenerated html files into xhtml files for the creation of an epub using Beautiful Soup.

This script manages the logic of loading files.
"""

# IMPORTS ##############################################################################################################
import argparse  # Command line arguments

from bs4 import BeautifulSoup

# Custom classes
import htmlManager
from book import book

import os.path

# CMD LINE ARGS ########################################################################################################

# CREATE CMD PARSER ----------------------------------------------------------------------------------------------------
cmd_parser = argparse.ArgumentParser()

# MANAGE ARGUMENTS -----------------------------------------------------------------------------------------------------
cmd_parser.add_argument("format",
                        help="The name of the format file to be used. It must be found in the format subfolder.")

# GET CMD LINE ARGS ----------------------------------------------------------------------------------------------------
cmd_args = cmd_parser.parse_args()  # GET PROVIDED ARGUMENTS

format_name = cmd_args.format  # NAME OF THE FORMAT TO BE USED
format_path = "format/{}.json".format(format_name)

# PROGRAM SET UP #######################################################################################################

# FORMAT SETUP ---------------------------------------------------------------------------------------------------------
if os.path.exists(format_path):  # Check if the book format file exists
    format_file = open(format_path, 'r')
    thisBook = book(0, format_file)
    format_file.close()
else:  # NO FORMAT FOUND - EXIT
    print("Error: Format does not exist")
    exit()

# PROGRAM LOGIC ########################################################################################################
# MANAGE TYPE OF FORMAT ------------------------------------------------------------------------------------------------
match thisBook.type:
    case "LibreOffice":
        # BUILD CHAPTER PATH
        chapter_count = 1
        chapter_path = "{}/{}.html".format(thisBook.origin_folder, thisBook.chapter_file_name)
        # LOOP THROUGH ALL CHAPTERS
        while os.path.exists(chapter_path.format(chapter_count)):
            file = open(chapter_path.format(chapter_count), "r")
            file_soup = BeautifulSoup(file, "html.parser")

            htmlManager.clean_libreOffice(file_soup, thisBook, chapter_count)

            file.close()

            chapter_count += 1
        print("CHAPTERS COMPLETE                                      ")  # WHITESPACE TO CLEAR LINE

        # LOOP THROUGH ALL ADDITIONAL PARTS
        for file_name in thisBook.additional_files:
            additional_path = "{}/{}.html".format(thisBook.origin_folder, file_name)
            if os.path.exists(additional_path):
                file = open(additional_path, "r")
                file_soup = BeautifulSoup(file, "html.parser")

                htmlManager.clean_libreOffice(file_soup, thisBook, file_name)

                file.close()
        print("ADDITIONAL COMPLETE                                    ")  # WHITESPACE TO CLEAR LINE
    case "ao3":
        # OPEN FILES
        file = open(thisBook.main_file + ".html", "r")
        file_soup = BeautifulSoup(file, "html.parser")

        htmlManager.clean_ao3(file_soup, thisBook)

        file.close()
    case "series":
        pass

# PRINT SHOW END OF PROJECT - WHITESPACE TO CLEAR PREVIOUS LETTERS
print("ALL COMPLETE                                   ")

